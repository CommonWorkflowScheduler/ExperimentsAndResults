report {
    enabled = true
    file = '/data/output/report.html'
}

params {
    max_memory = 5.GB
    max_cpus = 2
}

process.pod.nodeSelector = 'cwsexperiment=true'
k8s {
    pod.nodeSelector = 'cwsscheduler=true'
    scheduler.nodeSelector = 'cwsscheduler=true'
}

process.executor = 'k8s'
k8s {
    debug.yaml = true
    namespace = 'cws'
    serviceAccount = 'nextflow'
    workDir = '/data/work/'
    projectDir = '/data/project/'
    imagePullPolicy = 'IfNotPresent'
    launchDir = '/data/launch/'
    runAsUser = 0
    fetchNodeName = true
    scheduler {
        name = 'workflow-scheduler'
        namespace = 'cws'
        serviceAccount = 'nextflowscheduleraccount'
        imagePullPolicy: 'Always'
        cpu = '2'
        autoClose = false
        runAsUser = 0
        batchSize = 1000
    }
}
executor {
    queueSize = 300
}

dag {
    enabled = true
    file = '/data/output/dag.html'
}

trace {
    enabled = true
    sep = ';'
    raw = true
    file = '/data/output/trace.csv'
    fields = 'task_id,hostname,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt,workdir,scratch,error_action'
}

profiles {
    CPU {
        params {
            max_memory = 50.GB
            max_cpus = 6
        }
    }
    fifo_random {
        k8s.scheduler.strategy = "fifo-random"
    }
    fifo_roundrobin {
        k8s.scheduler.strategy = "fifo-roundrobin"
    }
    fifo_fair {
        k8s.scheduler.strategy = "fifo-fair"
    }
    rank_random {
        k8s.scheduler.strategy = "rank-random"
    }
    rank_roundrobin {
        k8s.scheduler.strategy = "rank-roundrobin"
    }
    rank_fair {
        k8s.scheduler.strategy = "rank-fair"
    }
    rank_min_random {
        k8s.scheduler.strategy = "rank_min-random"
    }
    rank_min_roundrobin {
        k8s.scheduler.strategy = "rank_min-roundrobin"
    }
    rank_min_fair {
        k8s.scheduler.strategy = "rank_min-fair"
    }
    rank_max_random {
        k8s.scheduler.strategy = "rank_max-random"
    }
    rank_max_roundrobin {
        k8s.scheduler.strategy = "rank_max-roundrobin"
    }
    rank_max_fair {
        k8s.scheduler.strategy = "rank_max-fair"
    }
    random_random {
        k8s.scheduler.strategy = "random-random"
    }
    random_roundrobin {
        k8s.scheduler.strategy = "random-roundrobin"
    }
    random_fair {
        k8s.scheduler.strategy = "random-fair"
    }
    max_random {
        k8s.scheduler.strategy = "max-random"
    }
    max_roundrobin {
        k8s.scheduler.strategy = "max-roundrobin"
    }
    max_fair {
        k8s.scheduler.strategy = "max-fair"
    }
    min_random {
        k8s.scheduler.strategy = "min-random"
    }
    min_roundrobin {
        k8s.scheduler.strategy = "min-roundrobin"
    }
    min_fair {
        k8s.scheduler.strategy = "min-fair"
    }
}

includeConfig "versions.config"
